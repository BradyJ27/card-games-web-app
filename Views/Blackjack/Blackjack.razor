@page "/blackjack"
@using BlackjackLibrary.API;
@using BlackjackLibrary.EventArgs;
@using BlackjackLibrary.Models;
@using System;
@using Models.Blackjack.Enums;
@using Controllers.NewBlackjack;
@inject IJSRuntime jsRuntime

<h2>Blackjack</h2>


<button type="button" @onclick="NavigateToRules" class="btn btn-primary" target="blank" style="float: right">
    How to Play
</button>
@code {

    public async Task NavigateToRules()
    {
        string url = "/blackjackrules";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    BlackjackController Blackjackgame = new BlackjackController();
}

@* If the game has not started yet, display start button*@
@if (Blackjackgame.Gamestate == GameState.NotStarted)
{
    <p class="text-info">Click 'Start' if you would like to play or click 'How to play' for instructions!</p>
    // <p>@instruction</p>
    <button class="btn btn-primary" @onclick="Blackjackgame.Start">Start</button>
}
else if (Blackjackgame.Gamestate == GameState.Betting)
{
    <h2>Player Balance</h2>
    <h3 class="text-success">$@Blackjackgame.PlayerBalance</h3>
    <h4>How much do you want to bet?</h4>
    <div class="row">
        @if (Blackjackgame.PlayerBalance < 10)
         {
            <span class="display-3 text-danger">Out of money!</span>
         }
        @if (Blackjackgame.PlayerBalance >= 10)
        {
            <button class="btn btn-primary" @onclick="(() => Blackjackgame.Bet(10))" style="margin:5px">Bet $10</button>
        }
        @if (Blackjackgame.PlayerBalance >= 20)
        {
            <button class="btn btn-primary" @onclick="(() => Blackjackgame.Bet(20))" style="margin:5px">Bet $20</button>
        }
        @if (Blackjackgame.PlayerBalance >= 50)
        {
            <button class="btn btn-primary" @onclick="(() => Blackjackgame.Bet(50))" style="margin:5px">Bet $50</button>
        }
    </div>
}
else if (Blackjackgame.Gamestate == GameState.InProgress)
{
    <div>
        <h2>Player Balance</h2>
        <h3 class="text-success">$@Blackjackgame.PlayerBalance</h3>

        <h3>Dealer Hand</h3>
        @foreach (var b in Blackjackgame.DealerHand)
        {
            <img src="@b" />
        }
        <h4>@Blackjackgame.DealerScore</h4>

        <h3>Player Hand</h3>
        @foreach (var a in Blackjackgame.PlayerHand)
        {
            <img src="@a" />
        }
        <h4>@Blackjackgame.PlayerScore</h4>

    </div>
    <div class="row">
        <button class="btn btn-primary" @onclick="(() => Blackjackgame.PlayerHit())" style="margin:5px">Hit</button>
        <button class="btn btn-primary" @onclick="(() => Blackjackgame.PlayerStand())" style="margin:5px">Stand</button>
    </div>
}
else if (Blackjackgame.Gamestate == GameState.Payout)
{
    <div>
        <h2>Player Balance</h2>
        <h3 class="text-success">$@Blackjackgame.PlayerBalance</h3>

        <h3>Dealer Hand</h3>
        @foreach (var b in Blackjackgame.DealerHand)
        {
            <img src="@b" />
        }
        <h4>@Blackjackgame.DealerScore</h4>

        <h3>Player Hand</h3>
        @foreach (var a in Blackjackgame.PlayerHand)
        {
            <img src="@a" />
        }
        <h4>@Blackjackgame.PlayerScore</h4>

        <div class="row">
            <button class="btn btn-primary" @onclick="(() => Blackjackgame.KeepPlaying())" style="margin:5px">Keep Playing</button>
            <button class="btn btn-primary" @onclick="(() => Blackjackgame.Exit())" style="margin:5px">Exit</button>
        </div>
    </div>
    <h4>@Blackjackgame.Result</h4>
}
else if (Blackjackgame.Gamestate == GameState.EndOfGame)
{
    <h2>Player Balance</h2>
    <h3 class="text-success">$@Blackjackgame.PlayerBalance</h3>
    <span class="display-4 text-success">@Blackjackgame.Result</span>
}

