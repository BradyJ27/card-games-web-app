@page "/poker"

@using Models.Poker;
@using Models.Poker.Enums;
@using Views;
@using Views.Poker.Partials;
@using card_games_web_app_blazor.Views.Poker.Partials

@inject IJSRuntime jsRuntime


@code {
    Dealer dealer = new Dealer(); //Creating a new Dealer also creates a new, shuffled CardDeck
    Player player = new Player();
    Player playertwo = new Player();
    Player playerthree = new Player();
    CommunityCards communityCards = new CommunityCards();
    Hand playerhand;
    Hand playertwohand;
    Hand playerthreehand;




    public async Task NavigateToRules()
    {
        string url = "/pokerrules";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    GameState state = GameState.NotStarted;

    public async Task InitializeHand()
    {
        if (dealer.Deck.Count < 13)
        {
            state = GameState.Shuffling;
            dealer.Deck = new CardDeck();
            await Delay(1000);
        }

        state = GameState.Betting;
    }

    public async Task Bet(decimal amount)
    {
        if (player.Funds >= amount && player.Cards.Count == 0)
        {
            player.Bet += amount;
            await Deal();
        }
        else if(player.Funds >= amount && player.Cards.Count > 0 && communityCards.Cards.Count != 5)
        {
            await DealCommunityCard();
        }
        else
        {  
            EndHand();
            //await NewHand();
        }
    }

    public async Task Deal()
    {
        state = GameState.Dealing;
        //Deal a card to each player. The dealer's card is not visible.
        await dealer.DealToPlayer(player);
        StateHasChanged();

        var playerTwoCardOne = dealer.Deal();
        playerTwoCardOne.IsVisible = false;
        await playertwo.AddCard(playerTwoCardOne);
        StateHasChanged();

        var playerThreeCardOne = dealer.Deal();
        playerThreeCardOne.IsVisible = false;
        await playerthree.AddCard(playerThreeCardOne);
        StateHasChanged();

        await dealer.DealToPlayer(player);
        StateHasChanged();

        var playerTwoCardTwo = dealer.Deal();
        playerTwoCardTwo.IsVisible = false;
        await playertwo.AddCard(playerTwoCardTwo);
        StateHasChanged();

        var playerThreeCardTwo = dealer.Deal();
        playerThreeCardTwo.IsVisible = false;
        await playerthree.AddCard(playerThreeCardTwo);
        StateHasChanged();


        state = GameState.InProgress;


    }

    public bool HasPairInOwnHand(Player player)
    {
        if(player.Cards[0].Value == player.Cards[1].Value)
        {
            return true;
        }
        else
        {
            return false;

        }
    }

    public Card HighCardInOwnHand(Player player)
    {
        if(player.Cards[0].Value > player.Cards[1].Value)
        {
            return player.Cards[0];

        }
        else
        {
            return player.Cards[1];
        }
    }

    public async Task DealCommunityCard()
    {
        var communitycard = dealer.Deal();
        await communityCards.AddCard(communitycard);

        
        StateHasChanged();

    }

    public void Fold()
    {
        player.HasFolded = true ;
        EndHand();
    }

    public async Task NewHand()
    {
        //Payout the player's bets
        player.Collect();

        //Clear the hands
        player.ClearHand();
        playertwo.ClearHand();
        playerthree.ClearHand();
        communityCards.ClearHand();

        //Reset the game area
        state = GameState.NotStarted;

        

        //Begin a new hand!
        await InitializeHand();
    }

    public async Task Delay(int millis)
    {
        await Task.Delay(millis);
        StateHasChanged();
    }

    

    public void EndHand()
    {
        state = GameState.ShowDown;

        
        playerhand = new Hand(player.Cards, communityCards.Cards);
        playertwohand = new Hand(playertwo.Cards, communityCards.Cards);
        playerthreehand = new Hand(playerthree.Cards, communityCards.Cards);



        if (player.HasFolded)
        {
            //Player loses their bet
            player.Change -= player.Bet;
            
        }
        else if ((playerhand.value > playertwohand.value) &&  (playerhand.value > playerthreehand.value))
        {
            //If the player is not busted but the dealer is, the player gets the amount of their bet back, plus the bet again.
            player.Change += player.Bet;
        }
        else if (playerhand.value < playertwohand.value && playerhand.value < playerthreehand.value)
        {
            //This is a "normal" win condition; the player has more than the dealer and neither are busted.
            playertwo.Change -= player.Bet;
        }
        
        else //In all other situations, the player loses their bet.
        {
            player.Change += player.Bet * -1;
        }

        //No matter what, the player's bet gets reset
        player.Bet = 0;
        
    }
}


<h1 style="top: 0px; text-align: center" >Texas Holdem</h1>
<body>
     <div style="float: right">
        <PokerFunds Funds="player.Funds" Change="player.Change" />
    </div>


    
        @if(communityCards.Cards.Count != 0)
        {
    
            <div ><strong>Community Cards
                </strong>
            </div>
            
            <div>
                <PokerHand Cards="communityCards.Cards"/>
            </div>
        }

    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />

    <div class="button-holder">
        @if (state == GameState.Betting)
        {
            @if (player.Funds < 10)
            {
                <span class="display-3 text-danger; inherit-button-holder">Out of money!</span>
            }
            @if (player.Funds >= 10)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(10))">Bet $10</button>
            }
            @if (player.Funds >= 20)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(20))">Bet $20</button>
            }
            @if (player.Funds >= 50)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(50))">Bet $50</button>
            }
        }
        </div>

        <div>
        @if (state == GameState.Payout)
        {
            <PokerHandResult PlayerHand="playerhand" PlayerTwoHand="playertwohand" PlayerThreeHand="playerthreehand" Player="player" />
        }
        @if (state == GameState.Dealing || state == GameState.Shuffling
        || state == GameState.InProgress)
        {
            <PokerMessage State="state" Bet="player.Bet" />
        }
    </div>

    


    <div>
        @if (state == GameState.NotStarted || player.Funds < 10)
        {
            <button class="btn btn-secondary" @onclick="(() => InitializeHand())">Start Game</button>
        }
        @if (state == GameState.InProgress && !player.HasFolded)
        {
            <button class="btn btn-primary" @onclick="(() => Fold())">Fold</button>
            @if (player.Funds < 10)
            {
                <span class="display-3 text-danger">Out of money!</span>
            }
            @if (player.Funds >= 1)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(1))">Bet $1</button>
            }
            @if (player.Funds >= 5)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(5))">Bet $5</button>
            }
            @if (player.Funds >= 10)
            {
                <button class="btn btn-primary" @onclick="(() => Bet(10))">Bet $10</button>
            }
            //<button class="btn btn-primary" @onclick="(() => Check())">Check</button>
        }
       
        @if (state == GameState.Payout)
        {
            <button class="btn btn-secondary" @onclick="(() => NewHand())">Keep Going!</button>
            
        }
    </div>

    <div class="row">
    <div class="column" style="padding-right: 350px">
        <PokerScore State="state" Player="player" />
        
       <PokerHand Cards="player.Cards" />
    
    </div>

    <div class="column" style="padding-right: 350px">
        <PokerHand Cards = "playertwo.Cards" />
    </div>

    <div class="column">
        <PokerHand Cards = "playerthree.Cards" />
    </div>
         
    </div>


    


    @if(state == GameState.ShowDown)
    {
        for(int i=0; i<2; i++)
            {
                playertwo.Cards[i].IsVisible = true;
                playerthree.Cards[i].IsVisible = true;
            }
            
          StateHasChanged();
        state = GameState.Payout;
    }


</body>
   
    
    


    
    


